#!/usr/bin/env bash

# initialize global variables
rows=0
cols=0
  

function what_to_do()
{
  case $1 in 
  dims)
    stdin_or_file "$@"
    ;;
  transpose)
    stdin_or_file "$@"
    ;;
  mean)
    stdin_or_file "$@"
    ;;
  add)
    add "$2" "$3"
    ;;
  multiply)
    multiply "$2" "$3"
    ;;
  *)
    problems
    ;;
  esac
}

function stdin_or_file()
{
  if [[ "${#@}" -gt 2 ]]
  then
    problems
    exit
  fi

  if [[ -z "$2" ]]
  then
    # stdin
    cat - | "$1"
  else
    # file
    if [[ ! -e "$2" ]] || [[ ! -r "$2" ]] # remove this test to trigger grading bug
    then
      problems
      exit
    fi

    cat "$2" | "$1"
  fi
}

function matrix_into_memory()
{
  local line data temp rows cols

  while read line
  do
    temp=($line)
    data=(${data[@]} ${temp[@]})
    ((rows++))

    if [[ $cols -eq 0 ]]
    then
      cols=${#temp[@]}
    fi
  done

  # the matrix dimensions are stored in the first
  # two elements of this array, followed by all of
  # the elements of the matrix
  data=($rows $cols ${data[@]})

  #echo "[matrix_into_memory] $rows $cols"
  echo ${data[@]}
}

function dims()
{
  local temp

  temp=($(cat - | matrix_into_memory))
  rows=${temp[@]:0:1}
  cols=${temp[@]:1:1}

  echo "$rows $cols"
}

function transpose()
{
  local temp j i

  temp=($(cat - | matrix_into_memory))
  rows=${temp[@]:0:1}
  cols=${temp[@]:1:1}
  temp=(${temp[@]:2:$((${#temp[@]} - 2))})
  
  #echo ${temp[@]}

  for i in $(eval echo {0..$((cols - 1))})
  do
    j=$i

    while [[ $j -lt $((rows * cols)) ]]
    do
      echo -ne "${temp[$j]}"

      # only print tabs if we're not on the last column
      if ! [[ $j -eq $((i + (rows-1)*cols)) ]]
      then
        echo -ne "\t"
      fi

      ((j = j + cols))
    done

    echo
  done
}

function mean()
{
  local temp avg

  temp=($(cat - | matrix_into_memory))
  rows=${temp[@]:0:1}
  cols=${temp[@]:1:1}
  temp=(${temp[@]:2:$((${#temp[@]} - 2))})

  for i in $(eval echo {0..$((cols - 1))})
  do
    j=$i
    avg=0

    while [[ $j -lt $((rows * cols)) ]]
    do
      ((avg += "${temp[$j]}"))
      ((j = j + cols))
    done
    
    ((avg = avg/rows)) #FIXME: rounding
    echo -n "$avg"

    # only print tabs if we're not on the last column
    if ! [[ $i -eq $((cols - 1)) ]]
    then
      echo -ne "\t"
    fi
  done

  echo
}

function add()
{
  mat_l=($(cat "$1" | matrix_into_memory))
  mat_r=($(cat "$2" | matrix_into_memory))
  rows=(${mat_l[@]:0:1} ${mat_r[@]:0:1})
  cols=(${mat_l[@]:1:1} ${mat_r[@]:1:1})
  mat_l=(${mat_l[@]:2:$((${#mat_l[@]} - 2))})
  mat_r=(${mat_r[@]:2:$((${#mat_r[@]} - 2))})

  if ! [[ $rows -eq $cols ]] | [[ ${rows[1]} -eq ${cols[1]} ]]
  then
    problems
    exit
  fi

  for i in $(eval echo {0..$((rows - 1))})
  do
    for j in $(eval echo {$((i*cols))..$(((i + 1)*cols - 1))})
    do
      echo -n $((${mat_l[j]} + ${mat_r[j]}))

      if ! [[ $j -eq $(((i + 1)*cols - 1)) ]]
      then
        echo -ne "\t"
      fi
    done

    echo
  done
}

function multiply()
{
  mat_l=($(cat "$1" | matrix_into_memory))
  mat_r=($(cat "$2" | matrix_into_memory))
  rows=(${mat_l[@]:0:1} ${mat_r[@]:0:1})
  cols=(${mat_l[@]:1:1} ${mat_r[@]:1:1})
  mat_l=(${mat_l[@]:2:$((${#mat_l[@]} - 2))})
  mat_r=(${mat_r[@]:2:$((${#mat_r[@]} - 2))})

  if [[ $cols -ne ${rows[1]} ]]
  then
    problems
    exit
  fi

  for i in $(eval echo {0..$((rows - 1))})
  do
    for j in $(eval echo {0..$((${cols[1]} - 1))})
    do
      sum=0

      for k in $(eval echo {0..$((cols - 1))})
      do
        ((sum += ${mat_l[$((i*cols + k))]} * ${mat_r[$((j + k*${cols[1]}))]}))
      done

      echo -n "$sum"

      if ! [[ $j -eq $((${cols[1]} - 1)) ]]
      then
        echo -ne "\t"
      fi
    done

    echo
  done
}

function problems()
{
  echo "Something is wrong, aborting." 1>&2
  return 1
}


what_to_do "$@"
